package com.zjtzsw.embed.util.httpcp.service;

import java.util.concurrent.TimeUnit;

import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.zjtzsw.embed.util.httpcp.config.HttpClientConfig;
import com.zjtzsw.embed.util.httpcp.factory.ApiServiceFactory;
import com.zjtzsw.embed.util.httpcp.factory.PoolManagerFactory;


/**
 * @author franocris
 *
 */
public class HttpClientService {

	private static CloseableHttpClient httpClient = null;
	private final static HttpClientConfig httpClientConfig = new HttpClientConfig();

	public static void start() {
		ApiServiceFactory api = new ApiServiceFactory("/base", null, null);
		System.out.println("#-------------------------开始API测试连接-------------------------");
		api.doHttpRequest();
		System.out.println("#-------------------------API测试连接成功-------------------------");
		System.out.println("#-------------------------测试连接池速度--------------------------");
		api.doHttpRequest();
	}
	
	private static void createhttpClient() {
		httpClient = HttpClients.custom()
				.setProxy(httpClientConfig.getProxyhttpHost())       //设置代理,暂不启用代理
				.setConnectionManager(PoolManagerFactory.connManager)             //连接管理器	
				.setDefaultRequestConfig(httpClientConfig.getRequestConfig()) //默认请求配置
				.setRetryHandler(httpClientConfig.getHttpRequestRetryHandler())               //重试策略
				.evictIdleConnections(30, TimeUnit.SECONDS)
				.build();

	}

	public static CloseableHttpClient getHttpClient() {
		long start = System.currentTimeMillis();
		createhttpClient();
		System.out.println("获取HttpClient对象完成，耗时:"+(System.currentTimeMillis()-start)+"ms");
		return httpClient;
	}	
}
